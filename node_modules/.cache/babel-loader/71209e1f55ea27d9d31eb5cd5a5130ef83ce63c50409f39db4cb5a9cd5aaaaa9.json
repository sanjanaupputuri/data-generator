{"ast":null,"code":"const industries = [\"FinTech\", \"HealthTech\", \"EdTech\", \"E-commerce\", \"SaaS\", \"AI/ML\", \"IoT\", \"Blockchain\", \"GreenTech\", \"FoodTech\"];\nconst stages = [\"Pre-seed\", \"Seed\", \"Series A\", \"Series B\", \"Series C\"];\nconst locations = [\"San Francisco\", \"New York\", \"Austin\", \"Boston\", \"Seattle\", \"Los Angeles\", \"Chicago\", \"Miami\", \"Denver\", \"Atlanta\"];\nconst businessModels = [\"B2B\", \"B2C\", \"B2B2C\", \"Marketplace\", \"Subscription\", \"Freemium\"];\nconst getRandomItem = array => array[Math.floor(Math.random() * array.length)];\nconst getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const generateStartup = () => {\n  const foundedDate = new Date(Date.now() - getRandomNumber(30, 2000) * 24 * 60 * 60 * 1000);\n  return {\n    id: Math.random().toString(36).substr(2, 9),\n    name: `${getRandomItem(['Tech', 'Smart', 'Digital', 'Cloud', 'Data', 'AI'])}${getRandomItem(['Hub', 'Labs', 'Solutions', 'Works', 'Pro', 'Flow'])}`,\n    industry: getRandomItem(industries),\n    stage: getRandomItem(stages),\n    location: getRandomItem(locations),\n    foundedDate: foundedDate.toISOString().split('T')[0],\n    employees: getRandomNumber(2, 500),\n    fundingRaised: getRandomNumber(50000, 50000000),\n    businessModel: getRandomItem(businessModels),\n    revenue: Math.random() > 0.3 ? getRandomNumber(0, 10000000) : 0,\n    isProfitable: Math.random() > 0.5,\n    website: `www.${getRandomItem(['tech', 'smart', 'digital'])}${getRandomNumber(100, 999)}.com`\n  };\n};\nexport const generateBatch = count => {\n  return Array.from({\n    length: count\n  }, generateStartup);\n};","map":{"version":3,"names":["industries","stages","locations","businessModels","getRandomItem","array","Math","floor","random","length","getRandomNumber","min","max","generateStartup","foundedDate","Date","now","id","toString","substr","name","industry","stage","location","toISOString","split","employees","fundingRaised","businessModel","revenue","isProfitable","website","generateBatch","count","Array","from"],"sources":["/home/sanjana/data/src/utils/startupGenerator.js"],"sourcesContent":["const industries = [\"FinTech\", \"HealthTech\", \"EdTech\", \"E-commerce\", \"SaaS\", \"AI/ML\", \"IoT\", \"Blockchain\", \"GreenTech\", \"FoodTech\"];\nconst stages = [\"Pre-seed\", \"Seed\", \"Series A\", \"Series B\", \"Series C\"];\nconst locations = [\"San Francisco\", \"New York\", \"Austin\", \"Boston\", \"Seattle\", \"Los Angeles\", \"Chicago\", \"Miami\", \"Denver\", \"Atlanta\"];\nconst businessModels = [\"B2B\", \"B2C\", \"B2B2C\", \"Marketplace\", \"Subscription\", \"Freemium\"];\n\nconst getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];\nconst getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const generateStartup = () => {\n  const foundedDate = new Date(Date.now() - getRandomNumber(30, 2000) * 24 * 60 * 60 * 1000);\n  \n  return {\n    id: Math.random().toString(36).substr(2, 9),\n    name: `${getRandomItem(['Tech', 'Smart', 'Digital', 'Cloud', 'Data', 'AI'])}${getRandomItem(['Hub', 'Labs', 'Solutions', 'Works', 'Pro', 'Flow'])}`,\n    industry: getRandomItem(industries),\n    stage: getRandomItem(stages),\n    location: getRandomItem(locations),\n    foundedDate: foundedDate.toISOString().split('T')[0],\n    employees: getRandomNumber(2, 500),\n    fundingRaised: getRandomNumber(50000, 50000000),\n    businessModel: getRandomItem(businessModels),\n    revenue: Math.random() > 0.3 ? getRandomNumber(0, 10000000) : 0,\n    isProfitable: Math.random() > 0.5,\n    website: `www.${getRandomItem(['tech', 'smart', 'digital'])}${getRandomNumber(100, 999)}.com`\n  };\n};\n\nexport const generateBatch = (count) => {\n  return Array.from({ length: count }, generateStartup);\n};\n"],"mappings":"AAAA,MAAMA,UAAU,GAAG,CAAC,SAAS,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,WAAW,EAAE,UAAU,CAAC;AACnI,MAAMC,MAAM,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC;AACvE,MAAMC,SAAS,GAAG,CAAC,eAAe,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;AACtI,MAAMC,cAAc,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,UAAU,CAAC;AAEzF,MAAMC,aAAa,GAAIC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGH,KAAK,CAACI,MAAM,CAAC,CAAC;AAChF,MAAMC,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAKN,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAII,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;AAEvF,OAAO,MAAME,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGN,eAAe,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;EAE1F,OAAO;IACLO,EAAE,EAAEX,IAAI,CAACE,MAAM,CAAC,CAAC,CAACU,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAC3CC,IAAI,EAAE,GAAGhB,aAAa,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,GAAGA,aAAa,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,EAAE;IACnJiB,QAAQ,EAAEjB,aAAa,CAACJ,UAAU,CAAC;IACnCsB,KAAK,EAAElB,aAAa,CAACH,MAAM,CAAC;IAC5BsB,QAAQ,EAAEnB,aAAa,CAACF,SAAS,CAAC;IAClCY,WAAW,EAAEA,WAAW,CAACU,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpDC,SAAS,EAAEhB,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC;IAClCiB,aAAa,EAAEjB,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC;IAC/CkB,aAAa,EAAExB,aAAa,CAACD,cAAc,CAAC;IAC5C0B,OAAO,EAAEvB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,GAAGE,eAAe,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC;IAC/DoB,YAAY,EAAExB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG;IACjCuB,OAAO,EAAE,OAAO3B,aAAa,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC,GAAGM,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC;EACzF,CAAC;AACH,CAAC;AAED,OAAO,MAAMsB,aAAa,GAAIC,KAAK,IAAK;EACtC,OAAOC,KAAK,CAACC,IAAI,CAAC;IAAE1B,MAAM,EAAEwB;EAAM,CAAC,EAAEpB,eAAe,CAAC;AACvD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}